
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import combBoxs.PatientCombo;
import dao.DbOperation;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrintManager;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author PC
 */
public class Patient extends javax.swing.JFrame {

    private int idPatient = -1;
    private model.Patient patient = null;
    private int index = 0;

    /**
     * Creates new form Patient
     */
    public Patient() {
        initComponents();
        getAllPatients();
        detailConsultationBtn.setEnabled(false);
        createCertificat.setEnabled(false);
    }

    public void getAllPatients() {
        try {
            ResultSet rs = GlobalVariables.patientDao.all();
            patientC.removeAllItems();
            patientC.insertItemAt(new PatientCombo(-1, ""), 0);
            while (rs.next()) {
                String fname = rs.getString("fname");
                String lname = rs.getString("lname");
                String name = lname + " " + fname;
                int idPatient = rs.getInt("id");
                PatientCombo pc = new PatientCombo(idPatient, name);
                patientC.addItem(pc);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void validateDataCertificat() {
        String dateDeb = "";
        if(dateDebInput.getDate() != null){ 
            dateDeb = GlobalVariables.dateFormat.format(dateDebInput.getDate());
        }

        String nbrJr = nbrJrInput.getText();
        String cause = causeInput.getText();
        if (!dateDeb.equals("") && !nbrJr.equals("") && !cause.equals("") && this.idPatient != -1) {
            createCertificat.setEnabled(true);
        } else {
            createCertificat.setEnabled(false);
        }
    }

    public void displayPatientInformation() {
        fnameInput.setText(patient.getFname());
        lnameInput.setText(patient.getLname());
        try {
            dnInput.setDate(GlobalVariables.dateFormat.parse(patient.getDn()));
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Date Error");
        }

    }

    public void getPatientInformation() {
        try {
            
            PatientCombo itemSelected = (PatientCombo) patientC.getSelectedItem();
            int idPatient = itemSelected.getIdPatient();
            this.idPatient = idPatient;
            ResultSet rs = DbOperation.getData("SELECT * FROM patients WHERE id=" + this.idPatient);
            while (rs.next()) {
                patient = new model.Patient();
                patient.setFname(rs.getString("fname"));
                patient.setLname(rs.getString("lname"));
                patient.setDn(GlobalVariables.dateFormat.format(rs.getDate("dn")));
                patient.setIdPatient(rs.getInt("id"));
            }
            this.displayPatientInformation();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        fnameInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lnameInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nbrJrInput = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        createCertificat = new javax.swing.JButton();
        detailConsultationBtn = new javax.swing.JButton();
        patientC = new javax.swing.JComboBox<>();
        dnInput = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        causeInput = new javax.swing.JTextField();
        dateDebInput = new com.toedter.calendar.JDateChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("First name : ");

        fnameInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fnameInputKeyReleased(evt);
            }
        });

        jLabel3.setText("Last name : ");

        lnameInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lnameInputKeyReleased(evt);
            }
        });

        jLabel4.setText(" Birth Data : ");

        jButton1.setText("Edit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Edit Patient");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("Certificat Medical");

        jLabel6.setText("Date Debut : ");

        nbrJrInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nbrJrInputKeyReleased(evt);
            }
        });

        jLabel7.setText("Nombre jour");

        createCertificat.setText("Create");
        createCertificat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCertificatActionPerformed(evt);
            }
        });

        detailConsultationBtn.setText("Afficher Details Consultations");
        detailConsultationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailConsultationBtnActionPerformed(evt);
            }
        });

        patientC.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                patientCItemStateChanged(evt);
            }
        });
        patientC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patientCKeyReleased(evt);
            }
        });

        dnInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dnInputMouseClicked(evt);
            }
        });
        dnInput.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                dnInputInputMethodTextChanged(evt);
            }
        });
        dnInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dnInputKeyReleased(evt);
            }
        });

        jLabel8.setText("Cause");

        causeInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                causeInputKeyReleased(evt);
            }
        });

        dateDebInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateDebInputKeyReleased(evt);
            }
        });

        jMenu1.setText("Home");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Rendez-Vous");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Patients");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });

        jMenu6.setText("Detail Patient");
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenu3.add(jMenu6);

        jMenu4.setText("Consultations");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu3.add(jMenu4);

        jMenuBar1.add(jMenu3);

        jMenu5.setText("Logout");
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dnInput, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addComponent(lnameInput)
                        .addComponent(jLabel3)
                        .addComponent(fnameInput)
                        .addComponent(jLabel2)
                        .addComponent(patientC, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(detailConsultationBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                            .addComponent(dateDebInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(createCertificat, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel7))
                    .addComponent(nbrJrInput)
                    .addComponent(jLabel8)
                    .addComponent(causeInput))
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(detailConsultationBtn))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fnameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nbrJrInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lnameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dnInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(causeInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(createCertificat)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dateDebInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        patient.setDn(GlobalVariables.dateFormat.format(dnInput.getDate())); 
        GlobalVariables.patientDao.edit(patient);
   
       
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void patientCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientCKeyReleased
        // TODO add your handling code here:
        this.getPatientInformation();
                this.validateDataCertificat();
               this.index = patientC.getSelectedIndex();
        if(this.patient != null){
            detailConsultationBtn.setEnabled(true);
        }else{
             detailConsultationBtn.setEnabled(false);
        }
    }//GEN-LAST:event_patientCKeyReleased

    private void patientCItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_patientCItemStateChanged
        // TODO add your handling code here:
        this.getPatientInformation();
        this.validateDataCertificat();
         this.index = patientC.getSelectedIndex();
        if(this.patient != null){
            detailConsultationBtn.setEnabled(true);
        }else{
             detailConsultationBtn.setEnabled(false);
        }
    }//GEN-LAST:event_patientCItemStateChanged

    private void dateDebInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateDebInputKeyReleased
        // TODO add your handling code here:
        this.validateDataCertificat();
    }//GEN-LAST:event_dateDebInputKeyReleased

    private void nbrJrInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nbrJrInputKeyReleased
        // TODO add your handling code here:
        this.validateDataCertificat();
    }//GEN-LAST:event_nbrJrInputKeyReleased

    private void causeInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_causeInputKeyReleased
        // TODO add your handling code here:
        this.validateDataCertificat();
    }//GEN-LAST:event_causeInputKeyReleased

    public void createAndPrintSimpleCertificate(String patientName, String dateDeb, String dateFin, String cause) {
        Document document = new Document();
        String filePath  = "";
        try {
            String folderPath = "C:\\CertificatsMedicaux"; // Specify the folder path (adjust if needed)
            File folder = new File(folderPath);
            if (!folder.exists()) { // Create the folder if it doesn't exist
                folder.mkdirs();
            }

            DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("ddMMyyyy"); // Format for filename
            String fileName = "Certificat_" + patientName.replace(" ", "_") + "_" + LocalDate.now().format(dateFormat) + ".pdf";
            filePath = folderPath + File.separator + fileName;
            PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();

            // Fonts
            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18);
            Font normalFont = FontFactory.getFont(FontFactory.HELVETICA, 12);

            // Title
            Paragraph title = new Paragraph("Certificat Médical", titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);

            // Patient information
            document.add(new Paragraph("Nom du patient: " + patientName, normalFont));
            document.add(new Paragraph("Date de début: " + dateDeb, normalFont));
            document.add(new Paragraph("Date de fin: " + dateFin, normalFont));
            document.add(new Paragraph("Cause de l'absence: " + cause, normalFont));

            // Doctor's signature (replace with actual details)
            document.add(Chunk.NEWLINE); // Add an empty line
            document.add(new Paragraph("Signature du médecin:", normalFont));
            document.add(new Paragraph("Dr. CAFR", normalFont)); // Replace with doctor's name

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur lors de la création du certificat: " + e.getMessage(),
                    "Erreur", JOptionPane.ERROR_MESSAGE);
        } finally {
            document.close(); // Close the document to ensure it's fully written

            // Automatically open the generated PDF for printing
            try {
                if (Desktop.isDesktopSupported()) {
                    Desktop.getDesktop().open(new File(filePath));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error opening the PDF: " + e.getMessage());
            }
        }
    }


    private void createCertificatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCertificatActionPerformed
        // TODO add your handling code here:
        model.Certificat cer = new model.Certificat();
        cer.setIdPatient(this.idPatient);
        Date dateDeb = dateDebInput.getDate();
        cer.setDateDeb(GlobalVariables.dateFormat.format(dateDebInput.getDate()));
        String nbrJours = nbrJrInput.getText();
        cer.setCause(causeInput.getText());
        int nbrJoursAdd = Integer.parseInt(nbrJours);
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(dateDeb);
        calendar.add(Calendar.DAY_OF_MONTH, nbrJoursAdd);
        Date dateFin = calendar.getTime();
        cer.setDateFin(GlobalVariables.dateFormat.format(dateFin));

        model.Model cerModel = new model.Model();

        cerModel = cer;
        GlobalVariables.certificatDao.save(cerModel);
        int result = JOptionPane.showConfirmDialog(null, // Parent component (null centers it)
                "voulez vous imprimmer la certificat", // Message to display
                "impression", // Dialog title
                JOptionPane.YES_NO_OPTION); // Button options

        if (result == JOptionPane.YES_OPTION) {
            this.createAndPrintSimpleCertificate(patient.getFname()+" "+patient.getLname(), cer.getDateDeb(), cer.getDateFin(), cer.getCause());
        } 
    }//GEN-LAST:event_createCertificatActionPerformed

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        // TODO add your handling code here:
        this.setVisible(false);

        new Login().setVisible(true);
    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
        new RDV().setVisible(true);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
        new Patients().setVisible(true);
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
        new Patient().setVisible(true);
    }//GEN-LAST:event_jMenu6MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
        new Consultation().setVisible(true);
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
        new Home().setVisible(true);
    }//GEN-LAST:event_jMenu1MouseClicked

    private void detailConsultationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailConsultationBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        int index = patientC.getSelectedIndex();
        new Consultations(patient,index).setVisible(true);
        
    }//GEN-LAST:event_detailConsultationBtnActionPerformed

    private void fnameInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fnameInputKeyReleased
        // TODO add your handling code here:
        patient.setFname(fnameInput.getText());
    }//GEN-LAST:event_fnameInputKeyReleased

    private void lnameInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lnameInputKeyReleased
        // TODO add your handling code here:
        patient.setLname(lnameInput.getText());
    }//GEN-LAST:event_lnameInputKeyReleased

    private void dnInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dnInputKeyReleased
        // TODO add your handling code here:
        patient.setDn(GlobalVariables.dateFormat.format(dnInput.getDate()));
    }//GEN-LAST:event_dnInputKeyReleased

    private void dnInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dnInputMouseClicked
        // TODO add your handling code here:
              patient.setDn(GlobalVariables.dateFormat.format(dnInput.getDate()));
    }//GEN-LAST:event_dnInputMouseClicked

    private void dnInputInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_dnInputInputMethodTextChanged
        // TODO add your handling code here:
           patient.setDn(GlobalVariables.dateFormat.format(dnInput.getDate()));
    }//GEN-LAST:event_dnInputInputMethodTextChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Patient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField causeInput;
    private javax.swing.JButton createCertificat;
    private com.toedter.calendar.JDateChooser dateDebInput;
    private javax.swing.JButton detailConsultationBtn;
    private com.toedter.calendar.JDateChooser dnInput;
    private javax.swing.JTextField fnameInput;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTextField lnameInput;
    private javax.swing.JTextField nbrJrInput;
    private javax.swing.JComboBox<PatientCombo> patientC;
    // End of variables declaration//GEN-END:variables

}
